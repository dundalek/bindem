// Generated by CoffeeScript 1.3.3
(function() {
  var el, eq, model, root, view;

  eq = strictEqual;

  root = null;

  el = null;

  model = null;

  view = null;

  QUnit.done = QUnit.testStart = function() {
    root = $('#el');
    if (root.length > 0) {
      root.remove();
    }
    root = $('<div id="el"><div></div></div>').appendTo($('body'));
    el = root.find('div');
    model = new Backbone.Model();
    return view = new Backbone.View({
      el: root,
      model: model
    });
  };

  module('options');

  test('model from view', function() {
    var bindings;
    bindings = {
      str: {
        text: 'div'
      }
    };
    Bindem.on.call(view, bindings);
    model.set('str', 'hello');
    return eq(el.text(), 'hello');
  });

  test('model option', function() {
    var bindings;
    bindings = {
      str: {
        text: 'div'
      }
    };
    Bindem.on.call(null, bindings, {
      root: root,
      model: model
    });
    model.set('str', 'hello');
    return eq(el.text(), 'hello');
  });

  test('initialize true', function() {
    var bindings;
    model.set('str', 'hello');
    bindings = {
      str: {
        text: 'div'
      }
    };
    Bindem.on.call(view, bindings, {
      initialize: true
    });
    return eq(el.text(), 'hello');
  });

  test('object literal', function() {
    var bindings;
    bindings = {
      str: {
        text: {
          selector: 'div'
        }
      }
    };
    Bindem.on.call(view, bindings);
    model.set('str', 'hello');
    return eq(el.text(), 'hello');
  });

  test('array', function() {
    var bindings;
    root.html('<span></span><div></div>');
    bindings = {
      str: {
        text: [
          'span', {
            selector: 'div'
          }
        ]
      }
    };
    Bindem.on.call(view, bindings);
    model.set('str', 'hello');
    eq(root.find('span').text(), 'hello');
    return eq(root.find('div').text(), 'hello');
  });

  test('event option', function() {
    var bindings;
    root.html('<input type="text">');
    el = root.find('input');
    bindings = {
      str: {
        value: {
          selector: 'input',
          event: 'keyup'
        }
      }
    };
    Bindem.on.call(view, bindings);
    model.set('str', 'hello');
    eq(el.val(), 'hello');
    el.val('hellox');
    eq(model.get('str'), 'hello');
    el.trigger($.Event('keyup'));
    return eq(model.get('str'), 'hellox');
  });

  module('bindings');

  test('text', function() {
    return ok(true);
  });

  test('html', function() {
    var bindings;
    bindings = {
      str: {
        html: 'div'
      }
    };
    Bindem.on.call(view, bindings);
    model.set('str', 'hello <i>world</i>');
    ok(el.html() === 'hello <i>world</i>' || el.html() === 'hello <I>world</I>');
    return eq(el.text(), 'hello world');
  });

  test('css', function() {
    var bindings;
    bindings = {
      attr: {
        css: {
          'hello': 'div'
        }
      }
    };
    Bindem.on.call(view, bindings);
    model.set('attr', true);
    eq(el.attr('class'), 'hello');
    model.set('attr', false);
    return eq(el.attr('class'), '');
  });

  test('style', function() {
    var bindings;
    bindings = {
      attr: {
        style: {
          'text-decoration': 'div'
        }
      }
    };
    Bindem.on.call(view, bindings);
    model.set('attr', 'underline');
    eq(el.css('text-decoration'), 'underline');
    model.set('attr', 'none');
    return eq(el.css('text-decoration'), 'none');
  });

  test('attr', function() {
    var bindings;
    bindings = {
      str: {
        attr: {
          title: 'div'
        }
      }
    };
    Bindem.on.call(view, bindings);
    model.set('str', 'hello');
    return eq(el.attr('title'), 'hello');
  });

  test('visible', function() {
    var bindings;
    bindings = {
      attr: {
        visible: 'div'
      }
    };
    Bindem.on.call(view, bindings);
    model.set('attr', false);
    ok(!el.is(':visible'));
    model.set('attr', true);
    return ok(el.is(':visible'));
  });

  test('hidden', function() {
    var bindings;
    bindings = {
      attr: {
        hidden: 'div'
      }
    };
    Bindem.on.call(view, bindings);
    model.set('attr', true);
    ok(!el.is(':visible'));
    model.set('attr', false);
    return ok(el.is(':visible'));
  });

  test('enable', function() {
    var bindings;
    root.html('<input type="text">');
    el = root.find('input');
    bindings = {
      attr: {
        enable: 'input'
      }
    };
    Bindem.on.call(view, bindings);
    model.set('attr', false);
    ok(el.is(':disabled'));
    model.set('attr', true);
    return ok(!el.is(':disabled'));
  });

  test('disable', function() {
    var bindings;
    root.html('<input type="text">');
    el = root.find('input');
    bindings = {
      attr: {
        disable: 'input'
      }
    };
    Bindem.on.call(view, bindings);
    model.set('attr', true);
    ok(el.is(':disabled'));
    model.set('attr', false);
    return ok(!el.is(':disabled'));
  });

  test('value', function() {
    var bindings, input, textarea;
    root.html('<input type="text"><textarea></textarea>');
    input = root.find('input');
    textarea = root.find('textarea');
    bindings = {
      attr: {
        value: ['input', 'textarea']
      }
    };
    Bindem.on.call(view, bindings);
    model.set('attr', 'hello');
    eq(input.val(), 'hello');
    eq(textarea.val(), 'hello');
    input.val('hi');
    input.trigger('change');
    eq(textarea.val(), 'hi');
    eq(model.get('attr'), 'hi');
    textarea.val('hola');
    textarea.trigger('change');
    eq(input.val(), 'hola');
    return eq(model.get('attr'), 'hola');
  });

  test('change', 6, function() {
    var bindings, value;
    root.html('<input type="text">');
    el = root.find('input');
    value = 'hello';
    bindings = {
      attr: {
        value: 'input',
        change: [
          (function(val) {
            return eq(val, value);
          }), 'onChange'
        ]
      }
    };
    view.onChange = function(val) {
      return eq(val, value);
    };
    Bindem.on.call(view, bindings);
    model.set('attr', value);
    eq(el.val(), 'hello');
    value = 'hi';
    el.val('hi');
    el.trigger('change');
    return eq(model.get('attr'), 'hi');
  });

  test('checked checkbox', function() {
    var bindings;
    root.html('<input type="checkbox">');
    el = root.find('input');
    bindings = {
      attr: {
        checked: 'input'
      }
    };
    Bindem.on.call(view, bindings);
    model.set('attr', true);
    ok(el.is(':checked'));
    model.set('attr', false);
    ok(!el.is(':checked'));
    el.attr('checked', true);
    el.click();
    ok(model.get('attr'));
    el.attr('checked', false);
    el.click();
    return ok(!model.get('attr'));
  });

  test('checked radio', function() {
    var bindings;
    root.html('<label><input type="radio" value="Alpha" />Alpha</label>\n<label><input type="radio" value="Beta"  />Beta</label>\n<label><input type="radio" value="Gamma" />Gamma</label>');
    bindings = {
      attr: {
        checked: 'input'
      }
    };
    Bindem.on.call(view, bindings);
    model.set('attr', 'Alpha');
    ok(root.find('[value=Alpha]').is(':checked'));
    ok(!root.find('[value=Beta]').is(':checked'));
    ok(!root.find('[value=Gamma]').is(':checked'));
    root.find('[value=Beta]').attr('checked', true).click();
    eq(model.get('attr'), 'Beta');
    ok(!root.find('[value=Alpha]').is(':checked'));
    ok(root.find('[value=Beta]').is(':checked'));
    return ok(!root.find('[value=Gamma]').is(':checked'));
  });

  test('checked radio multiple selectors', function() {
    var bindings;
    root.html('<label><input type="radio" value="Alpha" />Alpha</label>\n<label><input type="radio" value="Beta"  />Beta</label>\n<label><input type="radio" value="Gamma" />Gamma</label>');
    bindings = {
      attr: {
        checked: [
          '[value=Alpha]', {
            selector: '[value=Beta]'
          }, '[value=Gamma]'
        ]
      }
    };
    Bindem.on.call(view, bindings);
    model.set('attr', 'Alpha');
    ok(root.find('[value=Alpha]').is(':checked'));
    ok(!root.find('[value=Beta]').is(':checked'));
    ok(!root.find('[value=Gamma]').is(':checked'));
    root.find('[value=Beta]').attr('checked', true).click();
    eq(model.get('attr'), 'Beta');
    ok(!root.find('[value=Alpha]').is(':checked'));
    ok(root.find('[value=Beta]').is(':checked'));
    return ok(!root.find('[value=Gamma]').is(':checked'));
  });

  test('hasfocus', function() {
    var bindings;
    root.html('<input type="text">');
    el = root.find('input');
    bindings = {
      attr: {
        hasfocus: 'input'
      }
    };
    Bindem.on.call(view, bindings);
    model.set('attr', false);
    ok(!el.is(':focus'));
    model.set('attr', true);
    ok(el.is(':focus'));
    el.trigger('blur');
    ok(!model.get('attr'));
    el.trigger('focus');
    return ok(model.get('attr'));
  });

  test('uniqueName', function() {
    var bindings;
    root.html('<input type="text">');
    el = root.find('input');
    bindings = {
      x: {
        uniqueName: 'input'
      }
    };
    Bindem.on.call(view, bindings);
    return ok(el.attr('name').length > 0);
  });

  test('unbinding', 4, function() {
    var bindings, fire, value;
    root.html('<input type="text">');
    el = root.find('input');
    fire = true;
    bindings = {
      attr: {
        value: 'input',
        change: function(val) {
          return ok(fire);
        }
      }
    };
    model.set('attr', 'hello');
    Bindem.on.call(view, bindings, {
      initialize: true
    });
    eq(el.val(), 'hello');
    fire = false;
    Bindem.off.call(view, bindings);
    value = 'hi';
    el.val('hi');
    el.trigger('change');
    eq(model.get('attr'), 'hello');
    model.set('attr', 'hola');
    return eq(el.val(), 'hi');
  });

}).call(this);
